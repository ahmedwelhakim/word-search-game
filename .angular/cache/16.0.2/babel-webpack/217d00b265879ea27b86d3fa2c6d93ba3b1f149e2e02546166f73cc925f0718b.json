{"ast":null,"code":"import { Subscription } from 'rxjs';\nimport { BoardService } from './services/board.service';\nimport { CanvasService } from './services/canvas.service';\nimport { GameService } from './services/game.service';\nimport { InputHandlerService } from './services/input-handler.service';\nimport { SelectorService } from './services/selector.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/canvas.service\";\nimport * as i2 from \"./services/input-handler.service\";\nimport * as i3 from \"./services/selector.service\";\nimport * as i4 from \"./services/board.service\";\nimport * as i5 from \"./services/game.service\";\nimport * as i6 from \"@angular/common\";\nconst _c0 = [\"canvasContainer\"];\nlet GameComponent = /*#__PURE__*/(() => {\n  class GameComponent {\n    constructor(ngZone, canvasService, inputHandlerService, selectorService, boardService, gameService) {\n      this.ngZone = ngZone;\n      this.canvasService = canvasService;\n      this.inputHandlerService = inputHandlerService;\n      this.selectorService = selectorService;\n      this.boardService = boardService;\n      this.gameService = gameService;\n      this.animationFrameNumber = -1;\n      this.subscriptions = new Subscription();\n    }\n    ngOnDestroy() {\n      this.subscriptions.unsubscribe();\n    }\n    ngAfterViewInit() {\n      this.canvas = this.canvasService.canvas;\n      this.canvasContainerRef.nativeElement.appendChild(this.canvas);\n      this.ctx = this.canvasService.ctx;\n      this.onResize();\n      const sub1 = this.inputHandlerService.pressed$.subscribe(pressed => {\n        if (pressed) {\n          this.animationFrameNumber = requestAnimationFrame(this.gameLoop.bind(this));\n        }\n        if (!pressed) {\n          cancelAnimationFrame(this.animationFrameNumber);\n        }\n      });\n      this.subscriptions.add(sub1);\n    }\n    draw() {\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      this.ctx.fillStyle = 'skyblue';\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n      this.boardService.draw();\n      this.selectorService.draw();\n    }\n    gameLoop() {\n      this.draw();\n      this.animationFrameNumber = requestAnimationFrame(this.gameLoop.bind(this));\n    }\n    onResize() {\n      this.updateBoardSize();\n      this.boardService.updateLettersAndSizes();\n      this.draw();\n    }\n    updateBoardSize() {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      const minDimension = Math.min(width, height);\n      this.boardSize = minDimension * 0.9;\n      this.canvas.width = this.boardSize;\n      this.canvas.height = this.boardSize;\n    }\n  }\n  GameComponent.ɵfac = function GameComponent_Factory(t) {\n    return new (t || GameComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.CanvasService), i0.ɵɵdirectiveInject(i2.InputHandlerService), i0.ɵɵdirectiveInject(i3.SelectorService), i0.ɵɵdirectiveInject(i4.BoardService), i0.ɵɵdirectiveInject(i5.GameService));\n  };\n  GameComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GameComponent,\n    selectors: [[\"app-game\"]],\n    viewQuery: function GameComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvasContainerRef = _t.first);\n      }\n    },\n    hostBindings: function GameComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"resize\", function GameComponent_resize_HostBindingHandler() {\n          return ctx.onResize();\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([GameService, BoardService, CanvasService, InputHandlerService, SelectorService])],\n    decls: 8,\n    vars: 3,\n    consts: [[1, \"container\"], [1, \"game-container\"], [1, \"canvas-container\"], [\"canvasContainer\", \"\"], [1, \"selected-word\"]],\n    template: function GameComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵelement(2, \"div\", 2, 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 4)(5, \"p\");\n        i0.ɵɵtext(6);\n        i0.ɵɵpipe(7, \"async\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(7, 1, ctx.gameService.selectedWord$), \" \");\n      }\n    },\n    dependencies: [i6.AsyncPipe],\n    styles: [\".canvas-container[_ngcontent-%COMP%]{display:flex;justify-content:center}.container[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:center}.container[_ngcontent-%COMP%]   .selected-word[_ngcontent-%COMP%]{text-align:center}\"],\n    changeDetection: 0\n  });\n  return GameComponent;\n})();\nexport { GameComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}