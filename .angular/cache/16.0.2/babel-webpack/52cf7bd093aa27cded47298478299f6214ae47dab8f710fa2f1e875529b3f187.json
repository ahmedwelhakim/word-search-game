{"ast":null,"code":"export class Angle {\n  constructor(radAngle) {\n    this.radAngle = radAngle;\n  }\n  static fromDeg(degAngle) {\n    return new Angle(Angle.degToRad(degAngle));\n  }\n  static fromRad(radAngle) {\n    return new Angle(radAngle);\n  }\n  get radianAngle() {\n    return this.radAngle;\n  }\n  get degreeAngle() {\n    return Math.round(Angle.radToDeg(this.radianAngle));\n  }\n  valueOf() {\n    return this.radianAngle;\n  }\n  toString() {\n    return `deg: ${this.degreeAngle}Â°, rad: ${this.radianAngle}rad`;\n  }\n  addDeg(degAngle) {\n    return Angle.fromRad(this.radianAngle + Angle.degToRad(degAngle));\n  }\n  addRad(radAngle) {\n    return Angle.fromRad(this.radianAngle + radAngle);\n  }\n  static degToRad(degAngle) {\n    return degAngle * Math.PI / 180;\n  }\n  static radToDeg(radAngle) {\n    return radAngle * 180 / Math.PI;\n  }\n  static angle(p1, p2) {\n    let angle = Angle.atan2(p2.y - p1.y, p2.x - p1.x);\n    if (angle.degreeAngle < 0) angle = angle.addDeg(360);\n    return angle;\n  }\n  static cos(angle) {\n    return Math.cos(angle.radianAngle);\n  }\n  static sin(angle) {\n    return Math.sin(angle.radianAngle);\n  }\n  static tan(angle) {\n    return Math.tan(angle.radianAngle);\n  }\n  static atan2(y, x) {\n    return Angle.fromRad(Math.atan2(y, x));\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}