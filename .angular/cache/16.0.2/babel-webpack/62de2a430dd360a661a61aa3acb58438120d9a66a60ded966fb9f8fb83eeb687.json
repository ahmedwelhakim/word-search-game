{"ast":null,"code":"import { Subscription } from 'rxjs';\nimport { Point } from '../models/point.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./canvas.service\";\nimport * as i2 from \"./input-handler.service\";\nimport * as i3 from \"./board.service\";\nclass SelectorService {\n  constructor(canvasService, inputHandler, boardService) {\n    this.canvasService = canvasService;\n    this.inputHandler = inputHandler;\n    this.boardService = boardService;\n    this.startPoint = Point.from(0, 0);\n    this.endPoint = Point.from(0, 0);\n    this.subscriptions = new Subscription();\n    this.ctx = this.canvasService.ctx;\n    const sub1 = this.inputHandler.startEndPoints$.subscribe(([startPoint, endPoint]) => {\n      this.startPoint = startPoint;\n      this.endPoint = endPoint;\n    });\n    this.subscriptions.add(sub1);\n  }\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n    console.log('Selector Service Destroyed');\n  }\n  draw() {\n    if (!this.boardService.isInBoard(this.startPoint, this.endPoint)) {\n      return;\n    }\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.startPoint.x, this.startPoint.y);\n    this.ctx.lineWidth = 2;\n    this.ctx.lineTo(this.endPoint.x, this.endPoint.y);\n    this.ctx.strokeStyle = 'red';\n    this.ctx.stroke();\n  }\n}\nSelectorService.ɵfac = function SelectorService_Factory(t) {\n  return new (t || SelectorService)(i0.ɵɵinject(i1.CanvasService), i0.ɵɵinject(i2.InputHandlerService), i0.ɵɵinject(i3.BoardService));\n};\nSelectorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SelectorService,\n  factory: SelectorService.ɵfac\n});\nexport { SelectorService };","map":{"version":3,"names":["Subscription","Point","SelectorService","constructor","canvasService","inputHandler","boardService","startPoint","from","endPoint","subscriptions","ctx","sub1","startEndPoints$","subscribe","add","ngOnDestroy","unsubscribe","console","log","draw","isInBoard","beginPath","moveTo","x","y","lineWidth","lineTo","strokeStyle","stroke","i0","ɵɵinject","i1","CanvasService","i2","InputHandlerService","i3","BoardService","factory","ɵfac"],"sources":["/home/ahmed/Documents/projects/word-matcher/src/app/game/services/selector.service.ts"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { Point } from '../models/point.model';\nimport { BoardService } from './board.service';\nimport { CanvasService } from './canvas.service';\nimport { InputHandlerService } from './input-handler.service';\n\n@Injectable()\nexport class SelectorService implements OnDestroy {\n  private ctx: CanvasRenderingContext2D;\n  private startPoint = Point.from(0, 0);\n  private endPoint = Point.from(0, 0);\n\n  private subscriptions = new Subscription();\n\n  constructor(\n    private canvasService: CanvasService,\n    private inputHandler: InputHandlerService,\n    private boardService: BoardService\n  ) {\n    this.ctx = this.canvasService.ctx;\n    const sub1 = this.inputHandler.startEndPoints$.subscribe(\n      ([startPoint, endPoint]) => {\n        this.startPoint = startPoint;\n        this.endPoint = endPoint;\n      }\n    );\n    this.subscriptions.add(sub1);\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    console.log('Selector Service Destroyed');\n  }\n\n  draw() {\n    if (!this.boardService.isInBoard(this.startPoint, this.endPoint)) {\n      return;\n    }\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.startPoint.x, this.startPoint.y);\n    this.ctx.lineWidth = 2;\n    this.ctx.lineTo(this.endPoint.x, this.endPoint.y);\n    this.ctx.strokeStyle = 'red';\n    this.ctx.stroke();\n  }\n}\n"],"mappings":"AACA,SAASA,YAAY,QAAQ,MAAM;AACnC,SAASC,KAAK,QAAQ,uBAAuB;;;;;AAK7C,MACaC,eAAe;EAO1BC,YACUC,aAA4B,EAC5BC,YAAiC,EACjCC,YAA0B;IAF1B,KAAAF,aAAa,GAAbA,aAAa;IACb,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,YAAY,GAAZA,YAAY;IARd,KAAAC,UAAU,GAAGN,KAAK,CAACO,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;IAC7B,KAAAC,QAAQ,GAAGR,KAAK,CAACO,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;IAE3B,KAAAE,aAAa,GAAG,IAAIV,YAAY,EAAE;IAOxC,IAAI,CAACW,GAAG,GAAG,IAAI,CAACP,aAAa,CAACO,GAAG;IACjC,MAAMC,IAAI,GAAG,IAAI,CAACP,YAAY,CAACQ,eAAe,CAACC,SAAS,CACtD,CAAC,CAACP,UAAU,EAAEE,QAAQ,CAAC,KAAI;MACzB,IAAI,CAACF,UAAU,GAAGA,UAAU;MAC5B,IAAI,CAACE,QAAQ,GAAGA,QAAQ;IAC1B,CAAC,CACF;IACD,IAAI,CAACC,aAAa,CAACK,GAAG,CAACH,IAAI,CAAC;EAC9B;EACAI,WAAWA,CAAA;IACT,IAAI,CAACN,aAAa,CAACO,WAAW,EAAE;IAChCC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;EAC3C;EAEAC,IAAIA,CAAA;IACF,IAAI,CAAC,IAAI,CAACd,YAAY,CAACe,SAAS,CAAC,IAAI,CAACd,UAAU,EAAE,IAAI,CAACE,QAAQ,CAAC,EAAE;MAChE;;IAEF,IAAI,CAACE,GAAG,CAACW,SAAS,EAAE;IACpB,IAAI,CAACX,GAAG,CAACY,MAAM,CAAC,IAAI,CAAChB,UAAU,CAACiB,CAAC,EAAE,IAAI,CAACjB,UAAU,CAACkB,CAAC,CAAC;IACrD,IAAI,CAACd,GAAG,CAACe,SAAS,GAAG,CAAC;IACtB,IAAI,CAACf,GAAG,CAACgB,MAAM,CAAC,IAAI,CAAClB,QAAQ,CAACe,CAAC,EAAE,IAAI,CAACf,QAAQ,CAACgB,CAAC,CAAC;IACjD,IAAI,CAACd,GAAG,CAACiB,WAAW,GAAG,KAAK;IAC5B,IAAI,CAACjB,GAAG,CAACkB,MAAM,EAAE;EACnB;;AApCW3B,eAAe,C;mBAAfA,eAAe,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,aAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,mBAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,YAAA;AAAA;AAAfnC,eAAe,C;SAAfA,eAAe;EAAAoC,OAAA,EAAfpC,eAAe,CAAAqC;AAAA;SAAfrC,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}