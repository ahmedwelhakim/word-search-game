{"ast":null,"code":"import { Subscription } from 'rxjs';\nimport { Point } from '../models/point.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./canvas.service\";\nimport * as i2 from \"./input-handler.service\";\nimport * as i3 from \"./board.service\";\nlet SelectorService = /*#__PURE__*/(() => {\n  class SelectorService {\n    constructor(canvasService, inputHandler, boardService) {\n      this.canvasService = canvasService;\n      this.inputHandler = inputHandler;\n      this.boardService = boardService;\n      this.startPoint = Point.from(0, 0);\n      this.endPoint = Point.from(0, 0);\n      this.subscriptions = new Subscription();\n      this.ctx = this.canvasService.ctx;\n      const sub1 = this.inputHandler.startEndPoints$.subscribe(([startPoint, endPoint]) => {\n        this.startPoint = startPoint;\n        this.endPoint = endPoint;\n      });\n      this.subscriptions.add(sub1);\n    }\n    ngOnDestroy() {\n      this.subscriptions.unsubscribe();\n      console.log('Selector Service Destroyed');\n    }\n    draw() {\n      if (!this.boardService.isInBoard(this.startPoint, this.endPoint)) {\n        return;\n      }\n      this.ctx.beginPath();\n      this.ctx.moveTo(this.startPoint.x, this.startPoint.y);\n      this.ctx.lineWidth = 2;\n      this.ctx.lineTo(this.endPoint.x, this.endPoint.y);\n      this.ctx.strokeStyle = 'red';\n      this.ctx.stroke();\n    }\n  }\n  SelectorService.ɵfac = function SelectorService_Factory(t) {\n    return new (t || SelectorService)(i0.ɵɵinject(i1.CanvasService), i0.ɵɵinject(i2.InputHandlerService), i0.ɵɵinject(i3.BoardService));\n  };\n  SelectorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SelectorService,\n    factory: SelectorService.ɵfac\n  });\n  return SelectorService;\n})();\nexport { SelectorService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}