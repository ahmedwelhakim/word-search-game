{"ast":null,"code":"import { BehaviorSubject, Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./input-handler.service\";\nimport * as i2 from \"./board.service\";\nclass GameService {\n  constructor(inputHandler, boardService) {\n    this.inputHandler = inputHandler;\n    this.boardService = boardService;\n    this._selectedWord = new BehaviorSubject('');\n    this.subscriptions = new Subscription();\n    const words = ['كتاب', 'بحر', 'كلب'];\n    this.boardService.fillBoard(10, 10, words);\n    const inputSubscription = this.inputHandler.startEndPoints$.subscribe(([startPoint, endPoint]) => {\n      const selectedWord = this.boardService.getWord(startPoint, endPoint);\n      if (selectedWord) {\n        this._selectedWord.next(selectedWord);\n      }\n    });\n    this.subscriptions.add(inputSubscription);\n  }\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n  }\n  get selectedWord$() {\n    return this._selectedWord.asObservable();\n  }\n}\nGameService.ɵfac = function GameService_Factory(t) {\n  return new (t || GameService)(i0.ɵɵinject(i1.InputHandlerService), i0.ɵɵinject(i2.BoardService));\n};\nGameService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GameService,\n  factory: GameService.ɵfac\n});\nexport { GameService };","map":{"version":3,"names":["BehaviorSubject","Subscription","GameService","constructor","inputHandler","boardService","_selectedWord","subscriptions","words","fillBoard","inputSubscription","startEndPoints$","subscribe","startPoint","endPoint","selectedWord","getWord","next","add","ngOnDestroy","unsubscribe","selectedWord$","asObservable","i0","ɵɵinject","i1","InputHandlerService","i2","BoardService","factory","ɵfac"],"sources":["/home/ahmed/Documents/projects/word-matcher/src/app/game/services/game.service.ts"],"sourcesContent":["import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from 'rxjs';\nimport {BoardService} from './board.service';\nimport {InputHandlerService} from './input-handler.service';\n\n@Injectable()\nexport class GameService implements OnDestroy {\n  private _selectedWord = new BehaviorSubject<string>('');\n  private subscriptions = new Subscription();\n\n  constructor(\n    private inputHandler: InputHandlerService,\n    private boardService: BoardService\n  ) {\n    const words = ['كتاب', 'بحر', 'كلب']\n    this.boardService.fillBoard(10, 10, words);\n    const inputSubscription = this.inputHandler.startEndPoints$.subscribe(([startPoint, endPoint]) => {\n      const selectedWord = this.boardService.getWord(startPoint, endPoint);\n      if (selectedWord) {\n        this._selectedWord.next(selectedWord);\n      }\n    })\n    this.subscriptions.add(inputSubscription);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n\n  get selectedWord$() {\n    return this._selectedWord.asObservable();\n  }\n}\n"],"mappings":"AACA,SAAQA,eAAe,EAAEC,YAAY,QAAO,MAAM;;;;AAIlD,MACaC,WAAW;EAItBC,YACUC,YAAiC,EACjCC,YAA0B;IAD1B,KAAAD,YAAY,GAAZA,YAAY;IACZ,KAAAC,YAAY,GAAZA,YAAY;IALd,KAAAC,aAAa,GAAG,IAAIN,eAAe,CAAS,EAAE,CAAC;IAC/C,KAAAO,aAAa,GAAG,IAAIN,YAAY,EAAE;IAMxC,MAAMO,KAAK,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC;IACpC,IAAI,CAACH,YAAY,CAACI,SAAS,CAAC,EAAE,EAAE,EAAE,EAAED,KAAK,CAAC;IAC1C,MAAME,iBAAiB,GAAG,IAAI,CAACN,YAAY,CAACO,eAAe,CAACC,SAAS,CAAC,CAAC,CAACC,UAAU,EAAEC,QAAQ,CAAC,KAAI;MAC/F,MAAMC,YAAY,GAAG,IAAI,CAACV,YAAY,CAACW,OAAO,CAACH,UAAU,EAAEC,QAAQ,CAAC;MACpE,IAAIC,YAAY,EAAE;QAChB,IAAI,CAACT,aAAa,CAACW,IAAI,CAACF,YAAY,CAAC;;IAEzC,CAAC,CAAC;IACF,IAAI,CAACR,aAAa,CAACW,GAAG,CAACR,iBAAiB,CAAC;EAC3C;EAEAS,WAAWA,CAAA;IACT,IAAI,CAACZ,aAAa,CAACa,WAAW,EAAE;EAClC;EAEA,IAAIC,aAAaA,CAAA;IACf,OAAO,IAAI,CAACf,aAAa,CAACgB,YAAY,EAAE;EAC1C;;AAzBWpB,WAAW,C;mBAAXA,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,mBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA;AAAA;AAAX1B,WAAW,C;SAAXA,WAAW;EAAA2B,OAAA,EAAX3B,WAAW,CAAA4B;AAAA;SAAX5B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}