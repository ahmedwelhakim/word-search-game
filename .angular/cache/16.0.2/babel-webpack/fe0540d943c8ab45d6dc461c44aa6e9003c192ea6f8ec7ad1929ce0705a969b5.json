{"ast":null,"code":"//        (270)\n//          N\n//  (180)W     E(0, 360)\n//          S\n//        (90)\nimport { Angle } from './angle.model';\nexport class Direction {\n  static get N() {\n    return 270;\n  }\n  static get E() {\n    return 0;\n  }\n  static get S() {\n    return 90;\n  }\n  static get W() {\n    return 180;\n  }\n  static get NE() {\n    return 315;\n  }\n  static get NW() {\n    return 225;\n  }\n  static get SE() {\n    return 45;\n  }\n  static get SW() {\n    return 135;\n  }\n  static calcSnappedAngle(angle) {\n    if (angle.degreeAngle >= Direction.NE + 45 / 2 || angle.degreeAngle <= Direction.SE - 45 / 2) return Direction.E;\n    if (angle.degreeAngle >= Direction.NW + 45 / 2 && angle.degreeAngle <= Direction.NE - 45 / 2) return Direction.N;\n    if (angle.degreeAngle >= Direction.SW + 45 / 2 && angle.degreeAngle <= Direction.NW - 45 / 2) return Direction.W;\n    if (angle.degreeAngle >= Direction.SE + 45 / 2 && angle.degreeAngle <= Direction.SW - 45 / 2) return Direction.S;\n    if (angle.degreeAngle >= Direction.NE - 45 / 2 && angle.degreeAngle <= Direction.NE + 45 / 2) return Direction.NE;\n    if (angle.degreeAngle >= Direction.NW - 45 / 2 && angle.degreeAngle <= Direction.NW + 45 / 2) return Direction.NW;\n    if (angle.degreeAngle >= Direction.SW - 45 / 2 && angle.degreeAngle <= Direction.SW + 45 / 2) return Direction.SW;\n    if (angle.degreeAngle >= Direction.SE - 45 / 2 && angle.degreeAngle <= Direction.SE + 45 / 2) return Direction.SE;\n    // It should never reach here\n    throw new Error(`Invalid angle ${angle.radianAngle}`);\n  }\n  static getDirection(startPoint, endPoint) {\n    const angle = Angle.angle(startPoint, endPoint);\n    return Direction.calcSnappedAngle(angle);\n  }\n  static get directions() {\n    return [Direction.E, Direction.W, Direction.S, Direction.NE, Direction.NW, Direction.SW, Direction.SE];\n  }\n  static get randomDirection() {\n    return Direction.directions[Math.floor(Math.random() * Direction.directions.length)];\n  }\n}","map":{"version":3,"names":["Angle","Direction","N","E","S","W","NE","NW","SE","SW","calcSnappedAngle","angle","degreeAngle","Error","radianAngle","getDirection","startPoint","endPoint","directions","randomDirection","Math","floor","random","length"],"sources":["/home/ahmed/Documents/projects/word-matcher/src/app/game/models/directions.model.ts"],"sourcesContent":["//        (270)\n//          N\n//  (180)W     E(0, 360)\n//          S\n//        (90)\n\nimport {Angle} from './angle.model';\nimport {Point} from \"./point.model\";\n\nexport type DirectionVal = 270 | 0 | 90 | 180 | 315 | 225 | 45 | 135;\n\nexport class Direction {\n  static get N(): 270 {\n    return 270;\n  }\n\n  static get E(): 0 {\n    return 0;\n  }\n\n  static get S() : 90 {\n    return 90;\n  }\n\n  static get W() : 180 {\n    return 180;\n  }\n\n  static get NE(): 315 {\n    return 315;\n  }\n\n  static get NW(): 225 {\n    return 225;\n  }\n\n  static get SE():45 {\n    return 45;\n  }\n\n  static get SW():135 {\n    return 135;\n  }\n\n  static calcSnappedAngle(angle: Angle): DirectionVal {\n    if (\n      angle.degreeAngle >= Direction.NE + 45 / 2 ||\n      angle.degreeAngle <= Direction.SE - 45 / 2\n    )\n      return Direction.E;\n\n    if (\n      angle.degreeAngle >= Direction.NW + 45 / 2 &&\n      angle.degreeAngle <= Direction.NE - 45 / 2\n    )\n      return Direction.N;\n\n    if (\n      angle.degreeAngle >= Direction.SW + 45 / 2 &&\n      angle.degreeAngle <= Direction.NW - 45 / 2\n    )\n      return Direction.W;\n\n    if (\n      angle.degreeAngle >= Direction.SE + 45 / 2 &&\n      angle.degreeAngle <= Direction.SW - 45 / 2\n    )\n      return Direction.S;\n\n    if (\n      angle.degreeAngle >= Direction.NE - 45 / 2 &&\n      angle.degreeAngle <= Direction.NE + 45 / 2\n    )\n      return Direction.NE;\n\n    if (\n      angle.degreeAngle >= Direction.NW - 45 / 2 &&\n      angle.degreeAngle <= Direction.NW + 45 / 2\n    )\n      return Direction.NW;\n\n    if (\n      angle.degreeAngle >= Direction.SW - 45 / 2 &&\n      angle.degreeAngle <= Direction.SW + 45 / 2\n    )\n      return Direction.SW;\n\n    if (\n      angle.degreeAngle >= Direction.SE - 45 / 2 &&\n      angle.degreeAngle <= Direction.SE + 45 / 2\n    )\n      return Direction.SE;\n\n    // It should never reach here\n    throw new Error(`Invalid angle ${angle.radianAngle}`);\n  }\n\n  static getDirection(startPoint: Point, endPoint: Point): DirectionVal {\n    const angle = Angle.angle(startPoint, endPoint);\n    return Direction.calcSnappedAngle(angle);\n  }\n  static get directions(): DirectionVal[] {\n    return [\n      Direction.E,\n      Direction.W,\n      Direction.S,\n      Direction.NE,\n      Direction.NW,\n      Direction.SW,\n      Direction.SE,\n    ];\n  }\n\n  static get randomDirection(): DirectionVal {\n    return Direction.directions[\n      Math.floor(Math.random() * Direction.directions.length)\n      ];\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}