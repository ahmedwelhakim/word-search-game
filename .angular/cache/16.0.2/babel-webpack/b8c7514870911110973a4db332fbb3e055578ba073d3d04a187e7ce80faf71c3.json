{"ast":null,"code":"//        (270)\n//          N\n//  (180)W     E(0, 360)\n//          S\n//        (90)\nimport { Angle } from './angle.model';\nexport class Direction {\n  static get N() {\n    return 270;\n  }\n  static get E() {\n    return 0;\n  }\n  static get S() {\n    return 90;\n  }\n  static get W() {\n    return 180;\n  }\n  static get NE() {\n    return 315;\n  }\n  static get NW() {\n    return 225;\n  }\n  static get SE() {\n    return 45;\n  }\n  static get SW() {\n    return 135;\n  }\n  static calcSnappedAngle(angle) {\n    if (angle.degreeAngle >= Direction.NE + 45 / 2 || angle.degreeAngle <= Direction.SE - 45 / 2) return Direction.E;\n    if (angle.degreeAngle >= Direction.NW + 45 / 2 && angle.degreeAngle <= Direction.NE - 45 / 2) return Direction.N;\n    if (angle.degreeAngle >= Direction.SW + 45 / 2 && angle.degreeAngle <= Direction.NW - 45 / 2) return Direction.W;\n    if (angle.degreeAngle >= Direction.SE + 45 / 2 && angle.degreeAngle <= Direction.SW - 45 / 2) return Direction.S;\n    if (angle.degreeAngle >= Direction.NE - 45 / 2 && angle.degreeAngle <= Direction.NE + 45 / 2) return Direction.NE;\n    if (angle.degreeAngle >= Direction.NW - 45 / 2 && angle.degreeAngle <= Direction.NW + 45 / 2) return Direction.NW;\n    if (angle.degreeAngle >= Direction.SW - 45 / 2 && angle.degreeAngle <= Direction.SW + 45 / 2) return Direction.SW;\n    if (angle.degreeAngle >= Direction.SE - 45 / 2 && angle.degreeAngle <= Direction.SE + 45 / 2) return Direction.SE;\n    // It should never reach here\n    throw new Error(`Invalid angle ${angle.radianAngle}`);\n  }\n  static getDirection(startPoint, endPoint) {\n    const angle = Angle.angle(startPoint, endPoint);\n    return Direction.calcSnappedAngle(angle);\n  }\n  static get directions() {\n    return [Direction.E, Direction.W, Direction.S, Direction.NE, Direction.NW, Direction.SW, Direction.SE];\n  }\n  static get randomDirection() {\n    return Direction.directions[Math.floor(Math.random() * Direction.directions.length)];\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}