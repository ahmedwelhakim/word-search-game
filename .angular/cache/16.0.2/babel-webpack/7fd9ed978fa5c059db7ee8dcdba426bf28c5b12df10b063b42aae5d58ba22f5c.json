{"ast":null,"code":"export class Letter {\n  constructor(_letter, _point, _width, wordColor, boxColor) {\n    this._letter = _letter;\n    this._point = _point;\n    this._width = _width;\n    this.wordColor = wordColor;\n    this.boxColor = boxColor;\n    this.font = '20px sans-serif';\n  }\n  static from(letter, point, width, wordColor = 'rgb(2, 2, 58)', boxColor = 'rgb(218, 228, 240)') {\n    return new Letter(letter, point, width, wordColor, boxColor);\n  }\n  update(letter, point, width, wordColor, boxColor) {\n    this._letter = letter;\n    if (point) this._point = point;\n    if (width) this._width = width;\n    if (wordColor) this.wordColor = wordColor;\n    if (boxColor) this.boxColor = boxColor;\n  }\n  updateColors(boxColor, wordColor) {\n    this.boxColor = boxColor;\n    if (wordColor) this.wordColor = wordColor;\n  }\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.lineWidth = 1;\n    ctx.fillStyle = this.boxColor;\n    ctx.fillRect(this._point.x, this._point.y, this._width, this.height);\n    ctx.strokeStyle = this.wordColor;\n    ctx.strokeRect(this._point.x, this._point.y, this._width, this.height);\n    const letterCenter = this.calcLetterCenteredPoint(ctx);\n    ctx.font = this.font;\n    ctx.fillStyle = this.wordColor;\n    ctx.fillText(this._letter, letterCenter.x, letterCenter.y);\n  }\n  get letter() {\n    return this._letter;\n  }\n  get height() {\n    return this._width;\n  }\n  get width() {\n    return this._width;\n  }\n  get topLeftPoint() {\n    return this._point;\n  }\n  get topRightPoint() {\n    return this._point.add(this.width, 0);\n  }\n  get bottomLeftPoint() {\n    return this._point.add(0, this.height);\n  }\n  get bottomRightPoint() {\n    return this._point.add(this.width, this.height);\n  }\n  get centerPoint() {\n    return this._point.add(this.width / 2, this.height / 2);\n  }\n  calcLetterCenteredPoint(ctx) {\n    const metrics = ctx.measureText(this._letter);\n    const center = this.centerPoint;\n    const actualHeight = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;\n    const width = metrics.width;\n    return center.add(-width / 2, actualHeight / 2);\n  }\n  static get arabicLetters() {\n    // prettier-ignore\n    return [\"أ\", \"ب\", \"ت\", \"ث\", \"ج\", \"ح\", \"خ\", \"د\", \"ذ\", \"ر\", \"ز\", \"س\", \"ش\", \"ص\", \"ض\", \"ط\", \"ظ\", \"ع\", \"غ\", \"ف\", \"ق\", \"ك\", \"ل\", \"م\", \"ن\", \"ه\", \"و\", \"ي\"];\n  }\n  static get englishLetters() {\n    // prettier-ignore\n    return [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n  }\n  static getRandomLetter(lang = 'ar') {\n    if (lang === 'ar') {\n      return Letter.arabicLetters[Math.floor(Math.random() * Letter.arabicLetters.length)];\n    } else {\n      return Letter.englishLetters[Math.floor(Math.random() * Letter.englishLetters.length)];\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}